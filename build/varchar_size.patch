diff --git a/.gitignore b/.gitignore
index 74c39d55f..8babe8b5e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -37,3 +37,4 @@ jetbrains_config.js
 .cproject
 CTestTestfile.cmake
 tsconfig.json
+.idea
diff --git a/distribution/resources/src/main/resources/bin/dremio-config b/distribution/resources/src/main/resources/bin/dremio-config
index 0b218ea02..5208a6033 100644
--- a/distribution/resources/src/main/resources/bin/dremio-config
+++ b/distribution/resources/src/main/resources/bin/dremio-config
@@ -349,10 +349,10 @@ esac
 # Newer versions of glibc use an arena memory allocator that causes virtual
 # memory usage to explode. Tune the variable down to prevent vmem explosion.
 export MALLOC_ARENA_MAX=${MALLOC_ARENA_MAX:-4}
-export MALLOC_MMAP_THRESHOLD_=131072
-export MALLOC_TRIM_THRESHOLD_=131072
-export MALLOC_TOP_PAD_=131072
-export MALLOC_MMAP_MAX_=65536
+export MALLOC_MMAP_THRESHOLD_=10485759
+export MALLOC_TRIM_THRESHOLD_=10485759
+export MALLOC_TOP_PAD_=10485759
+export MALLOC_MMAP_MAX_=10485759
 
 # Variables exported from this script
 export JAVA_VERSION_STRING
diff --git a/provision/yarn/yarntwill/src/main/java/com/dremio/provision/yarn/YarnController.java b/provision/yarn/yarntwill/src/main/java/com/dremio/provision/yarn/YarnController.java
index 68e4511cc..da51efae5 100644
--- a/provision/yarn/yarntwill/src/main/java/com/dremio/provision/yarn/YarnController.java
+++ b/provision/yarn/yarntwill/src/main/java/com/dremio/provision/yarn/YarnController.java
@@ -120,10 +120,10 @@ public class YarnController {
 
     Map<String, String> envVars = Maps.newHashMap();
     envVars.put("MALLOC_ARENA_MAX", "4");
-    envVars.put("MALLOC_MMAP_THRESHOLD_", "131072");
-    envVars.put("MALLOC_TRIM_THRESHOLD_", "131072");
-    envVars.put("MALLOC_TOP_PAD_", "131072");
-    envVars.put("MALLOC_MMAP_MAX_", "65536");
+    envVars.put("MALLOC_MMAP_THRESHOLD_", "10485759");
+    envVars.put("MALLOC_TRIM_THRESHOLD_", "10485759");
+    envVars.put("MALLOC_TOP_PAD_", "10485759");
+    envVars.put("MALLOC_MMAP_MAX_", "10485759");
     // Set ${DREMIO_HOME} for YarnDaemon to avoid config substitution failure
     envVars.put(DREMIO_HOME, ".");
 
diff --git a/sabot/kernel/src/main/java/com/dremio/exec/ExecConstants.java b/sabot/kernel/src/main/java/com/dremio/exec/ExecConstants.java
index 85e99ec1f..b1d80e480 100644
--- a/sabot/kernel/src/main/java/com/dremio/exec/ExecConstants.java
+++ b/sabot/kernel/src/main/java/com/dremio/exec/ExecConstants.java
@@ -436,7 +436,7 @@ public interface ExecConstants {
 
   BooleanValidator SORT_FILE_BLOCKS = new BooleanValidator("store.file.sort_blocks", false);
 
-  PositiveLongValidator LIMIT_FIELD_SIZE_BYTES = new PositiveLongValidator("limits.single_field_size_bytes", Integer.MAX_VALUE, 32000);
+  PositiveLongValidator LIMIT_FIELD_SIZE_BYTES = new PositiveLongValidator("limits.single_field_size_bytes", Integer.MAX_VALUE, 10485759);
 
   LongValidator FLATTEN_OPERATOR_OUTPUT_MEMORY_LIMIT = new LongValidator("exec.operator.flatten_output_memory_limit", 512*1024*1024);
 
diff --git a/sabot/kernel/src/main/java/com/dremio/exec/expr/fn/hll/HyperLogLog.java b/sabot/kernel/src/main/java/com/dremio/exec/expr/fn/hll/HyperLogLog.java
index 39806866b..bff67f19c 100644
--- a/sabot/kernel/src/main/java/com/dremio/exec/expr/fn/hll/HyperLogLog.java
+++ b/sabot/kernel/src/main/java/com/dremio/exec/expr/fn/hll/HyperLogLog.java
@@ -27,7 +27,7 @@ import org.apache.calcite.sql.type.SqlTypeName;
 
 public class HyperLogLog {
 
-  public static final int HLL_VARBINARY_SIZE = 65536;
+  public static final int HLL_VARBINARY_SIZE = 10485759;
 
   public static class SqlHllDecodeOperator extends SqlFunction {
     public SqlHllDecodeOperator() {
diff --git a/sabot/vector-tools/src/main/java/com/dremio/common/expression/CompleteType.java b/sabot/vector-tools/src/main/java/com/dremio/common/expression/CompleteType.java
index dbe182c11..3d772b025 100644
--- a/sabot/vector-tools/src/main/java/com/dremio/common/expression/CompleteType.java
+++ b/sabot/vector-tools/src/main/java/com/dremio/common/expression/CompleteType.java
@@ -139,7 +139,7 @@ import com.google.flatbuffers.FlatBufferBuilder;
 @JsonDeserialize(using = CompleteType.De.class)
 public class CompleteType {
   public static final int MAX_DECIMAL_PRECISION = 38;
-  public static final int DEFAULT_VARCHAR_PRECISION = 65536;
+  public static final int DEFAULT_VARCHAR_PRECISION = 10485759;
 
   public static final CompleteType NULL = new CompleteType(ArrowType.Null.INSTANCE);
   public static final CompleteType LATE = new CompleteType(ArrowLateType.INSTANCE);
diff --git a/sabot/vector-tools/src/main/java/com/dremio/common/types/Types.java b/sabot/vector-tools/src/main/java/com/dremio/common/types/Types.java
index dce24f317..a513017f9 100644
--- a/sabot/vector-tools/src/main/java/com/dremio/common/types/Types.java
+++ b/sabot/vector-tools/src/main/java/com/dremio/common/types/Types.java
@@ -680,7 +680,7 @@ public class Types {
     }
 
     if (type == MinorType.VARBINARY || type == MinorType.VARCHAR) {
-      return 65536;
+      return 10485759;
     }
 
     return 0;
diff --git a/sabot/vector-tools/src/main/java/org/apache/arrow/vector/util/BasicTypeHelper.java b/sabot/vector-tools/src/main/java/org/apache/arrow/vector/util/BasicTypeHelper.java
index 84a399053..f79afb8e4 100644
--- a/sabot/vector-tools/src/main/java/org/apache/arrow/vector/util/BasicTypeHelper.java
+++ b/sabot/vector-tools/src/main/java/org/apache/arrow/vector/util/BasicTypeHelper.java
@@ -176,7 +176,7 @@ public class BasicTypeHelper {
   // Default length when casting to varchar : 65536 = 2^16
   // This only defines an absolute maximum for values, setting
   // a high value like this will not inflate the size for small values
-  public static final int VARCHAR_DEFAULT_CAST_LEN = 65536;
+  public static final int VARCHAR_DEFAULT_CAST_LEN = 10485759;
 
   protected static String buildErrorMessage(final String operation, final MinorType type) {
     return String.format("Unable to %s for minor type [%s]", operation, type);
